---
    # Create kubeconfig files for kube-proxy, kube-controller-manager, kube-scheduler and for admin user 
    # this play should work on masters[0] node, 
    # it require:
    #   - ca.pem file
    #   - admin.pem
    #   - kube-controller-manager.pem
    #   - kube-proxy.pem
    #   - kube-scheduler.pem
    # files to be present on /home/os_admin_username/CERTs  folder
#    - hosts: masters[0]
#      gather_facts: true
#      become: true
#      vars_files:
#        - ./vars/base_vars.yaml
#           
#      tasks:

        - name: set certificate-authority-data variable from ca.pem file via base64
          #prepare base64 encrypted content of ca certificate to embed it into kubeconfig files
          shell:
            "cat /home/{{ os_admin_username }}/CERTs/ca.pem | base64 -w 0"
          register: CA_DATA
          tags: [onlythis,cadata]

        - name: show CA_DATA #just to ensure CA_DATA is defined
          debug:
            msg: "{{ CA_DATA }}"
          tags: [onlythis,cadata]

        - name: list  certificates *.PEM files for kube-controller-manager, kube-proxy, kube-scheduler and for admin user 
          shell:
            # I take here not filenames of *.PEM files, but their names without extensions - (cut -d'.' -f 1 ) do a substring on '.' and take first part of result
            "ls /home/{{ os_admin_username }}/CERTs/ -I '*-key.pem' -I 'api*' -I 'ca.pem' -I '*account*' -I {{ groups.workers[0] }}.pem -I {{ groups.workers[1] }}.pem | cut -d'.' -f 1"
          register: CERT_FILES
          tags: onlythis
           
        - name: show CERT_FILES #just to ensure CERT_FILES is defined
          debug:
            msg: "{{ CERT_FILES }}"
          tags: onlythis

        - name: get base64 encoded client certificates 
          # while we have *.PEM files names - we can iterate through them and get their content
          shell:
            cat /home/{{ os_admin_username }}/CERTs/{{ item }}.pem | base64 -w 0
          loop: "{{ CERT_FILES.stdout_lines }}"
          register: CERT_DATA
          tags: empty

        - name: get base64 encoded client certificates KEYs 
          # while we have *.PEM files names - we can iterate through them and get their content
          shell:
            "cat /home/{{ os_admin_username }}/CERTs/{{ item }}-key.pem | base64 -w 0" # we encrypt it and make output in oneline
          loop: "{{ CERT_FILES.stdout_lines }}"
          register: CERT_KEYS
          tags: empty

        - name: show CERT_KEYS
          debug:
            msg: "{{ CERT_KEYS }}"
          tags: onlythis

        - name: get items from CERT_KEYS
          set_fact: { "{{ item.item | replace('-','_') }}_key":"{{ item.stdout }}" }
          loop: "{{ CERT_KEYS.results }}"      

        - name:  create kubeconfig files for kube-proxy, kube-controller-manager, kube-scheduler and for admin user 
         # create kubeconfig files for kubelet nodes, kube-proxy, kube-controller-manager, kube-scheduler and for admin user 
          template:
            src: ./templates/kubeconfig_control_plane.j2
            dest: "/home/{{ os_admin_username }}/{{ kubeconfigs[item.item | replace('-','_') ].kube_user_id }}.kubeconfig"
            owner: groot
            group: groot
            mode:  0640
          delegate_to: "{{ groups.masters | first }}"
          loop: "{{ CERT_DATA.results }}"
          tags: empty
