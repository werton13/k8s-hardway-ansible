---
    # Create kubeconfig files for workers nodes
    # this play should work on worker nodes, cause it should place to kubeconfig file - fields, extracted from current Ansible host
    # like "system:node:{{ inventory_hostname }}"
    # it require ca.pem file and current worker node cert *.PEM files to already uploaded to os_admin_username home folder
#    - hosts: workers[0]
#      gather_facts: true
#      become: true
#      vars_files:
#        - ./vars/base_vars.yaml
#
#      tasks:
        - name: set certificate-authority-data variable from ca.pem file via base64
          #prepare base64 encrypted content of ca certificate to embed it into kubeconfig files
          shell:
            "cat ca.pem | base64 -w 0"
          register: CA_DATA
          tags: [onlythis,cadata]

        - name: show CA_DATA #just to ensure CA_DATA is defined
          debug:
            msg: "{{ CA_DATA }}"
          tags: [onlythis,cadata]

        - name: list  certificates *.PEM files for workers
          shell:
            # I take here not filenames of *.PEM files, but their names without extensions - (cut -d'.' -f 1 ) do a substring on '.' and take first part of result
            "ls /home/{{ os_admin_username }}/ -I '*-key.pem' -I 'kube-proxy.*' -I 'api*' -I 'ca.pem' | grep '.pem'| cut -d'.' -f 1"
          register: CERT_FILES
          tags: onlythis
           
        - name: show CERT_FILES #just to ensure CERT_FILES is defined
          debug:
            msg: "{{ CERT_FILES }}"
          tags: onlythis

        - name: get base64 encoded client certificates 
          # while we have *.PEM files names - we can iterate through them and get their content
          shell:
            "cat /home/{{ os_admin_username }}/{{ item }}.pem | base64 -w 0" # we encrypt it and make output in oneline
          loop: "{{ CERT_FILES.stdout_lines }}"
          register: CERT_DATA
          tags: onlythis

        - name: get base64 encoded client certificates KEYs 
          # while we have *.PEM files names - we can iterate through them and get their content
          shell:
            "cat /home/{{ os_admin_username }}/{{ item }}-key.pem | base64 -w 0" # we encrypt it and make output in oneline
          loop: "{{ CERT_FILES.stdout_lines }}"
          when:  not item  is search("key")
          register: CERT_KEYS
          tags: empty
        
        - name: get items from CERT_KEYS
          set_fact: { "{{ item.item | replace('-','_') }}_key":"{{ item.stdout }}" }
          loop: "{{ CERT_KEYS.results }}"

        - name:  create kubeconfig files  for kubelets
         # create kubeconfig files for kubelet nodes
          template:
            src: ./templates/kubeconfig_kubelet.j2 # using separate template file
            dest: "/home/{{ os_admin_username }}/{{ kubeconfigs.kubelet.kube_user_id }}.kubeconfig"
            owner: groot
            group: groot
            mode:  0640
#         delegate_to: "{{ groups.masters | first }}"
          loop: "{{ CERT_DATA.results }}"
          tags: onlythis
